import numpy as np

from scipy.sparse import csr_matrix, csc_matrix
from scipy.sparse.csgraph import csgraph_from_dense
A = np.array([
    [5, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 0, 0],
    [1, 0, 4, 0, 0, 4, 0, 0, 0],
    [1, 0, 3, 0, 0, 0, 7, 0, 0],
    [2, 7, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 2, 0, 0, 0, 0, 2],
])

B = np.array([
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 2, 8, 2, 0],
    [0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 0, 0],
    [1, 0, 4, 0, 0, 2, 0, 0, 0],
    [1, 0, 2, 0, 0, 0, 1, 0, 0],
    [2, 9, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 2, 0, 0, 0, 0, 3],
])
count = 0

rows = len(A)
cols = len(A[0])

size = rows * cols

for i in range(0, rows):
    for j in range(0, cols):
        if (A[i][j] == 0):
            count = count + 1

if (count > (size / 2)):
    print("Данная матрица разреженная")
else:
    print("Данная матрица плотная")

sparsity = 1.0 - np.count_nonzero(A) / A.size
print(sparsity)


def get_csr_representation(matrix):
    rows_index = []
    columns = []
    elements = []
    row_len = len(matrix)
    col_len = len(matrix[0])
    for i in range(row_len):
        rows_index.append(len(columns))
        for j in range(col_len):
            if (matrix[i][j] != 0):
                columns.append(j)
                elements.append(matrix[i][j])
    rows_index.append(len(columns))

    return rows_index, columns, elements


def get_dense_representation(csr_matrix):
    size = (len(csr_matrix[0]) - 1, len(csr_matrix[0]) - 1)
    dense_matrix = np.zeros(size)
    for i in range(size[0]):
        for j in range(csr_matrix[0][i], csr_matrix[0][i + 1]):
            if j >= len(csr_matrix[2]):
                continue
            dense_matrix[i][csr_matrix[1][j]] = csr_matrix[2][j]

    return dense_matrix


def sparse_csr_multiplication(matrix_A, matrix_B):
    if matrix_A == matrix_B:
        elements = [i * i for i in matrix_A[2]]
        res_matr = (matrix_A[0], matrix_A[1], elements)
        return res_matr



#     rows, columns, elements = matrix_A
#     rows_count = len(matrix_B)
#     col_count = len(matrix_B[0])
#     C = [[0 for _ in range(col_count)] for _ in range(rows_count)]
#     print(C)
#     for col in range(col_count):
#         for row in range(rows_count):
#             for j in range(rows[row],rows[row+1]):
#                 C[row][col] += elements[j] * matrix_B[columns[j]][col]

#     return C
print('Исходная матрица B:')
print(B)
print('Упакованная CSR матрица A:')
A_csr = get_csr_representation(A)
A_csr

print('Упакованная CSR матрица B:')
B_csr = get_csr_representation(B)
B_csr

print('Распаковка, матрица A:')
get_dense_representation(A_csr)

print('Распаковка, матрица B:')
get_dense_representation(B_csr)

get_csr_representation(A*A)

print('Умножение A*A:')
sparse_csr_multiplication(A_csr, A_csr)

print('Умножение A*B:')
sparse_csr_multiplication(A_csr, B_csr)

print('Сложение:')

print('Упакованная CSR матрица:')
S = csr_matrix(A)
print(S)
